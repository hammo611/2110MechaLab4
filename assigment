
#include <SoftwareSerial.h>   // We need this even if we're not using a SoftwareSerial object
// Due to the way the Arduino IDE compiles
#include "SerialCommand.h"
SerialCommand SCmd;   // The demo SerialCommand object

int pwmL = 0;
int pwmR = 0;

float yLeft = 0;
float yRight = 0;
float yFront = 0;
void setup()
{
  Serial.begin(115200);

  // Setup callbacks for SerialCommand commands
  SCmd.addCommand("sensorL", set_yLeft);      // sets Left sensor measurements
  SCmd.addCommand("sensorR", set_yRight);     // sets Right sensor measurements
  SCmd.addCommand("sensorF", set_yFront);       // sets Front sensor measurements
  SCmd.addCommand("ctrl?", get_ctrl);      // gets ctrl alloc

}

void loop()
{
  SCmd.readSerial();     // We don't do much, just process serial commands
}


void set_yLeft(void)
{
  char *arg;
  arg = SCmd.next();
  yLeft = atof(arg);
}

void set_yRight(void)
{
  char *arg;
  arg = SCmd.next();
  yRight = atof(arg);
}

void set_yFront(void)
{
  char *arg;
  arg = SCmd.next();
  yFront = atof(arg);
}

void get_ctrl(void)
{
  ctrlAlloc();
  char string[50];
  sprintf(string, "%d,%d", pwmL, pwmR);
  Serial.println(string);
}



//////////////////////////////////////////////////////////
/*
   Edit the variable: states below by inserting the names
   of your states

   Edit the function ctrAlloc with your navigation algorithm
*/
//////////////////////////////////////////////////////////
//Define states
enum states {START, TURN, FINISH, DRIVING1, DRIVING2, HOLD} 
state = START;

void ctrlAlloc(void)
{
  int counter = 0;
  float error = 0;
  float last_error = 0;
  float Kp = 0.4;
  float Kd = 0.005;
  float reference = 900;
  float error_difference;
  
  switch (state) {
    case START:
      pwmL = 100;
      pwmR = 100;

      if(yRight < 1000)
      {
      state = DRIVING1;  
      }
      else if(yLeft < 1000)
      {
      state = DRIVING2;  
      }
 
      break;
    
    case DRIVING1:
      error = reference - yRight;
      error_difference = (last_error - error)/0.05;   
      pwmL = 60;
      pwmR = 60 + Kp*error + Kd*error_difference;
      
      if(yFront < 350)
      {
      state = TURN;  
      }
      break;
    
    case DRIVING2:
      error = -(100 - yLeft);
      error_difference = (last_error - error)/0.05;   
      pwmL = 60;
      pwmR = 60 + Kp*error + Kd*error_difference;
      
      if(yFront < 350)
      {
      state = TURN;  
      }
      break;
    
    case TURN:
      pwmL = 70;
      pwmR = 0;
   
      if(yFront > 350)
      {
      state = START;  
      }
      break;
    
    case FINISH:

      pwmL = 0;
      pwmR = 0;  
      break;
 
  }
}
